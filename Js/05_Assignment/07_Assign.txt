Q.7 Whatâ€™s async & await Keyword in JavaScript

Ans-

The async and await keywords are part of the ECMAScript 2017 (ES2017) standard and are used to handle asynchronous code in a more synchronous and readable manner.

The async keyword is used to define an asynchronous function. When you mark a function as async, it automatically returns a promise. Inside an async function, you can use the await keyword to pause the execution of the function until a promise is resolved or rejected. This allows you to write asynchronous code that looks and behaves more like synchronous code, making it easier to understand and maintain.

Here's an example that demonstrates the usage of async and await:


async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.log('Error:', error);
  }
}

fetchData();

In the example, the fetchData() function is marked as async, indicating that it's an asynchronous function. Inside the function, the await keyword is used to pause the execution until the fetch function's promise is resolved. This allows the subsequent line of code to access the response data as if it were synchronous.

Note that when using await, it can only be used within an async function. It allows you to wait for promises to be fulfilled or rejected, but it cannot be used in the global scope or in regular synchronous functions.

The combination of async and await simplifies asynchronous code by avoiding the need for excessive nesting or chaining of .then() and .catch() callbacks, commonly seen with promises. It brings a more linear and readable flow to asynchronous programming in JavaScript.