Q.4 how can you handle Async code in JavaScript ?

Ans-

In JavaScript, asynchronous code can be handled using various techniques. Here are some common approaches:

1. Callbacks: The traditional approach to handling asynchronous code in JavaScript is through callbacks. You can pass a function (callback) as an argument to an asynchronous function, and that function will be called when the asynchronous operation is completed. However, callbacks can lead to callback hell and make the code harder to read and maintain.

2. Promises: Promises provide a more elegant way to handle asynchronous operations. A promise represents the eventual completion (or failure) of an asynchronous operation and allows you to attach callbacks to handle the success or failure of the operation. Promises can be chained together using .then() and .catch() methods, which makes the code more readable and avoids callback hell.

3. Async/await: Introduced in ES2017, async/await is a syntactic sugar built on top of promises. It allows you to write asynchronous code in a more synchronous style, making it easier to read and understand. By marking a function as async, you can use the await keyword to pause the execution of the function until a promise is resolved or rejected. This eliminates the need for explicit .then() and .catch() chaining and simplifies error handling.

Here's an example demonstrating the use of async/await with promises:

async function getData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.log('Error:', error);
  }
}

getData();

In the example, the fetch() function returns a promise, and await is used to pause the execution until the promise is resolved. If the promise is fulfilled, the response is obtained and parsed as JSON. If any error occurs during the promise execution, it is caught and handled in the catch block.

These are the commonly used techniques for handling asynchronous code in JavaScript. Each approach has its own benefits and use cases, so choose the one that suits your needs and the version of JavaScript you are working with.